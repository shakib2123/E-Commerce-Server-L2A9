generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  phone        String?
  role         UserRole  @default(USER)
  profilePhoto String?
  address      String?
  lastLogin    DateTime? @default(now())
  isBlocked    Boolean   @default(false)
  isDeleted    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  shop         Shop?
  followedShop FollowedShop[]
  product      Product[]
  review       Review[]
  order        Order[]
  productView  ProductView[]
  payment      Payment[]

  @@map("users")
}

model Shop {
  id          String   @id @default(uuid())
  name        String?
  description String?
  logo        String?
  bannerImage String?
  email       String   @unique
  isBlocked   Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User           @relation(fields: [email], references: [email])
  followedShop FollowedShop[]
  product      Product[]
  order        Order[]

  @@map("shops")
}

model FollowedShop {
  id     String @id @default(uuid())
  shopId String
  userId String

  shop Shop @relation(fields: [shopId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("followed_shops")
}

model Product {
  id            String @id @default(uuid())
  name          String
  description   String
  price         Float
  discountPrice Float

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  inventoryCount Int
  images         String[]
  ratingsCount   Int?     @default(0)

  isFlashSale    Boolean @default(false)
  flashSalePrice Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews     Review[]
  productView ProductView[]
  orderItem   OrderItem[]

  @@map("products")
}

model ProductView {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("product_views")
}

model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Order {
  id         String   @id @default(uuid())
  userId     String
  shopId     String
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  shop       Shop        @relation(fields: [shopId], references: [id])
  orderItems OrderItem[]

  payment Payment?

  @@map("orders")
}

model OrderItem {
  id         String @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  products Product[]

  @@map("categories")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  userId        String
  amount        Decimal
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Coupon {
  id   String @id @default(uuid())
  code String @unique

  createdByRole String
  createdById   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
